service: fedeira-investment-services
frameworkVersion: '4'

# Serverless plugins:
plugins:
  - serverless-dynamodb-local
  - serverless-offline

# AWS provider configuration:
provider:
  name: aws
  runtime: nodejs18.x
  profile: Developer-PPI
  region: us-east-2
  # Tags for better resource management in AWS:
  tags:
    Project: 'IS'
    Service: 'Investment-services'
    Environment: "${opt:stage, 'dev'}"
  # Environment variables available for Lambda functions:
  environment:
    IS_OFFLINE: ${opt:isOffline, 'false'}
    PPI_API_VERSION: ${self:custom.variables.PPI_API_VERSION}
    PPI_API_KEY: ${self:custom.variables.PPI_API_KEY}
    PPI_API_SECRET: ${self:custom.variables.PPI_API_SECRET}
    PPI_AUTHORIZED_CLIENT: ${self:custom.variables.PPI_AUTHORIZED_CLIENT}
    PPI_CLIENT_KEY: ${self:custom.variables.PPI_CLIENT_KEY}
    PPI_ACCOUNT_NUMBER: ${self:custom.variables.PPI_ACCOUNT_NUMBER}
    INVESTMENT_TABLE: ${self:custom.variables.INVESTMENT_TABLE}

  # Monitoring & Logging:
  tracing:
    apiGateway: false
    lambda: false
  logs:
    restApi: false

  # IAM role permissions for Lambda functions:
  iam:
    role:
      statements:
        # Permit for ssm operations
        - Effect: 'Allow'
          Action:
            - 'ssm:GetParameter'
          Resource: 'arn:aws:ssm:us-east-2:${aws:accountId}:parameter/ppi' # 'arn:aws:ssm:us-east-2:${env:AWS_ACCOUNT_ID}:parameter/ppi'
        # Permit for dynamodb operations
        - Effect: 'Allow'
          Action:
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: 'arn:aws:dynamodb:us-east-2:${aws:accountId}:table/${self:provider.environment.INVESTMENT_TABLE}'
        # Permit for logs operations in cloudwatch
        - Effect: 'Allow'
          Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
          Resource: 'arn:aws:logs:us-east-2:${aws:accountId}:log-group:/aws/lambda/fedeira-investment-services:*'
        # Permit for ses operations
        - Effect: 'Allow'
          Action:
            - 'ses:SendEmail'
            - 'ses:SendRawEmail'
          Resource: 'arn:aws:ses:us-east-2:${aws:accountId}:identity/my-secure-domain.com'
        # Permit for S3 operations
        - Effect: 'Allow'
          Action:
            - 's3:ListBucket'
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::investment-bucket'
            - 'arn:aws:s3:::investment-bucket/*'
# Lambda functions definitions:
functions:
  getAvailableBalance:
    handler: investment-services/handler.getAvailableBalance
    timeout: 30
    memorySize: 1028
    events:
      - http:
          path: investment/available-balance
          method: get
          cors: true
# AWS Resources: DynamoDB Table & S3 Bucket:
resources:
  Resources:
    InvestmentRecordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.variables.INVESTMENT_TABLE}
        AttributeDefinitions:
          - AttributeName: investmentId
            AttributeType: S
        KeySchema:
          - AttributeName: investmentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    S3InvestmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: investment-bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

  Outputs:
    DynamoDBEndpoint:
      Description: 'DynamoDB Host Endpoint'
      Value: !Sub 'https://dynamodb.${AWS::Region}.amazonaws.com'

# Custom configurations:
custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: false
    target: node20
    platform: node
    exclude: ['aws-sdk']

  # Load environment variables from .env file:
  dotenv:
    path: .env
    include:
      - DEV_DYNAMODB_ENDPOINT
      - PPP_API_VERSION
      - AWS_ACCOUNT_ID

  # Custom variables used throughout the configuration:
  variables:
    PPI_API_VERSION: ${ssm:/ppi/apiVersion}
    PPI_API_KEY: ${ssm:/ppi/apiKey}
    PPI_API_SECRET: ${ssm:/ppi/apiSecret}
    PPI_AUTHORIZED_CLIENT: ${ssm:/ppi/authorizedClient}
    PPI_CLIENT_KEY: ${ssm:/ppi/clientKey}
    PPI_ACCOUNT_NUMBER: ${ssm:/ppi/accountNumber}
    INVESTMENT_TABLE: InvestmentRecords

  # DynamoDB local settings for offline development:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      seed: true
      convertEmptyValues: true
